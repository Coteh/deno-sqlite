/***** This file contains automatically generated code ******
**
** The code in this file has been automatically generated by
**
**   sqlite/tool/mkkeywordhash.c
**
** The code in this file implements a function that determines whether
** or not a given identifier is really an SQL keyword.  The same thing
** might be implemented more directly using a hand-written hash table.
** But by using this automatically generated code, the size of the code
** is substantially reduced.  This is important for embedded applications
** on platforms with limited memory.
*/
/* Hash score: 221 */
/* zKWText[] encodes 961 bytes of keyword text in 630 bytes */
/*   REINDEXEDESCAPEACHECKEYBEFOREIGNOREGEXPLAINSTEADDEFERRABLEFT       */
/*   ABLELSELECTHENDELETEMPORARYISNULLSAVEPOINTERSECTIESNOTNULLIKE      */
/*   XCLUDEFAULTRANSACTIONATURALTERAISEXCEPTRIGGERANGENERATED           */
/*   EFERREDISTINCTCONSTRAINTOFFSETUNIQUERYWITHOUTEREFERENCESBEGIN      */
/*   NERELEASEXCLUSIVEXISTSBETWEENOTHINGLOBYCASCADECASECOLLATE          */
/*   CREATECURRENT_DATEIMMEDIATEJOINSERTMATCHAVINGROUPSPLANALYZE        */
/*   PRAGMABORTUPDATEVALUESVIRTUALWAYSWHENWHERECURSIVEAFTERENAMEAND     */
/*   ROPARTITIONAUTOINCREMENTCASTCOLUMNCOMMITCONFLICTCROSS              */
/*   CURRENT_TIMESTAMPRECEDINGFAILASTFILTEREPLACEFIRSTFOLLOWINGFROM     */
/*   FULLIMITIFORDERESTRICTOTHERSOVERIGHTROLLBACKROWSUNBOUNDEDUNION     */
/*   USINGVACUUMVIEWINDOWINITIALLYPRIMARY                               */
static const char zKWText[629] = {
  'R','E','I','N','D','E','X','E','D','E','S','C','A','P','E','A','C','H',
  'E','C','K','E','Y','B','E','F','O','R','E','I','G','N','O','R','E','G',
  'E','X','P','L','A','I','N','S','T','E','A','D','D','E','F','E','R','R',
  'A','B','L','E','F','T','A','B','L','E','L','S','E','L','E','C','T','H',
  'E','N','D','E','L','E','T','E','M','P','O','R','A','R','Y','I','S','N',
  'U','L','L','S','A','V','E','P','O','I','N','T','E','R','S','E','C','T',
  'I','E','S','N','O','T','N','U','L','L','I','K','E','X','C','L','U','D',
  'E','F','A','U','L','T','R','A','N','S','A','C','T','I','O','N','A','T',
  'U','R','A','L','T','E','R','A','I','S','E','X','C','E','P','T','R','I',
  'G','G','E','R','A','N','G','E','N','E','R','A','T','E','D','E','F','E',
  'R','R','E','D','I','S','T','I','N','C','T','C','O','N','S','T','R','A',
  'I','N','T','O','F','F','S','E','T','U','N','I','Q','U','E','R','Y','W',
  'I','T','H','O','U','T','E','R','E','F','E','R','E','N','C','E','S','B',
  'E','G','I','N','N','E','R','E','L','E','A','S','E','X','C','L','U','S',
  'I','V','E','X','I','S','T','S','B','E','T','W','E','E','N','O','T','H',
  'I','N','G','L','O','B','Y','C','A','S','C','A','D','E','C','A','S','E',
  'C','O','L','L','A','T','E','C','R','E','A','T','E','C','U','R','R','E',
  'N','T','_','D','A','T','E','I','M','M','E','D','I','A','T','E','J','O',
  'I','N','S','E','R','T','M','A','T','C','H','A','V','I','N','G','R','O',
  'U','P','S','P','L','A','N','A','L','Y','Z','E','P','R','A','G','M','A',
  'B','O','R','T','U','P','D','A','T','E','V','A','L','U','E','S','V','I',
  'R','T','U','A','L','W','A','Y','S','W','H','E','N','W','H','E','R','E',
  'C','U','R','S','I','V','E','A','F','T','E','R','E','N','A','M','E','A',
  'N','D','R','O','P','A','R','T','I','T','I','O','N','A','U','T','O','I',
  'N','C','R','E','M','E','N','T','C','A','S','T','C','O','L','U','M','N',
  'C','O','M','M','I','T','C','O','N','F','L','I','C','T','C','R','O','S',
  'S','C','U','R','R','E','N','T','_','T','I','M','E','S','T','A','M','P',
  'R','E','C','E','D','I','N','G','F','A','I','L','A','S','T','F','I','L',
  'T','E','R','E','P','L','A','C','E','F','I','R','S','T','F','O','L','L',
  'O','W','I','N','G','F','R','O','M','F','U','L','L','I','M','I','T','I',
  'F','O','R','D','E','R','E','S','T','R','I','C','T','O','T','H','E','R',
  'S','O','V','E','R','I','G','H','T','R','O','L','L','B','A','C','K','R',
  'O','W','S','U','N','B','O','U','N','D','E','D','U','N','I','O','N','U',
  'S','I','N','G','V','A','C','U','U','M','V','I','E','W','I','N','D','O',
  'W','I','N','I','T','I','A','L','L','Y','P','R','I','M','A','R','Y',
};
/* aKWHash[i] is the hash value for the i-th keyword */
static const unsigned char aKWHash[127] = {
    82,  52, 130,  80, 102,  26,   0,   0,  92,   0,  83,  71,   0,
    56,  32,  87,  15,   0,  40,  95,  57, 124, 131,  21,   0,   0,
   136,   0,  37, 126,   0,  22, 104,   0,   9,   0,   0, 120,  78,
     0,  76,   6,   0,  59, 100, 142,   0, 132, 112,   0,   0,  68,
     0,  50,  17,   0,   0,   0,  24,   0,  23,  38,   5,  72, 138,
   107, 119,   0,  85,  51,  70, 140,  64, 117,  86,   0,  69,   0,
    11,  46,   0, 110,   0,   0,   0, 106,  10, 108, 113, 122,  14,
    53, 121,   0,  90,   0,  67, 118,  73,  48, 127, 135,  89,  81,
    34,  27, 123,   0,   0, 105,  54, 128, 125,   0,  31,   0,   0,
    42,   0,  96,  35,  36,   0,  19,  43, 114,  91,
};
/* aKWNext[] forms the hash collision chain.  If aKWHash[i]==0
** then the i-th keyword has no more hash collisions.  Otherwise,
** the next keyword with the same hash is aKWHash[i]-1. */
static const unsigned char aKWNext[142] = {
     0,   0,   0,   0,   4,   0,  41,   0,   0, 103, 111,   0,   0,
     0,   2,   0,   0,   0,   0,   0,   0,  13,   0, 137,   0,   0,
   116,  55,   0,   0, 133,  12,   0,   0,  65,   0, 134,   0,   0,
   129,   0,   0,  33,   0,   0,   0,   0,  45,   0,   0, 101,   0,
     0,   0,   0,   0,  84,   0,   0,   0,  66,   0,   0,   0,   0,
     0, 139,  25,  39,   0,   0,   0,  99,   0,   0,   1,  74,   0,
     0,   0,  28,   0,   0,   0, 141,   3,   0,   0,   0,   0,  58,
    60,  63,   0,   0,   0,   0,  44,   0,  16,   8,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,  79,  98,   0, 109,  18,   7,
    61,   0,  77,  94, 115,   0,   0,  62,   0,   0,  97,   0,  47,
     0,  75,   0,  93,  29,  30,  49,  20,   0,   0,   0,  88,
};
/* aKWLen[i] is the length (in bytes) of the i-th keyword */
static const unsigned char aKWLen[142] = {
     7,   7,   5,   4,   6,   4,   5,   3,   6,   7,   3,   6,   6,
     7,   7,   3,  10,   4,   5,   4,   6,   4,   3,   6,   9,   4,
     2,   6,   5,   9,   9,   4,   7,   3,   2,   4,   4,   7,   7,
    11,   6,   2,   7,   5,   5,   6,   7,   5,   9,   8,   8,   2,
    10,   4,   6,   2,   3,   6,   5,   7,   4,   5,  10,   5,   5,
     7,   2,   9,   6,   7,   7,   4,   2,   7,   3,   4,   7,   6,
    12,   9,   4,   6,   5,   6,   6,   5,   4,   7,   6,   5,   6,
     6,   7,   6,   4,   5,   9,   5,   6,   3,   4,   9,  13,   2,
     2,   4,   6,   6,   8,   5,  17,  12,   7,   9,   4,   4,   6,
     7,   5,   9,   4,   4,   5,   2,   5,   8,   6,   4,   5,   8,
     4,   3,   9,   5,   5,   6,   4,   6,   2,   9,   3,   7,
};
/* aKWOffset[i] is the index into zKWText[] of the start of
** the text for the i-th keyword. */
static const unsigned short int aKWOffset[142] = {
     0,   2,   2,   8,   9,  14,  16,  20,  23,  25,  25,  29,  33,
    36,  41,  46,  48,  56,  59,  63,  65,  70,  72,  74,  78,  78,
    82,  87,  89,  93,  99, 107, 111, 111, 111, 114, 117, 120, 125,
   131, 136, 140, 141, 146, 150, 154, 159, 165, 168, 176, 183, 184,
   191, 198, 201, 201, 204, 207, 210, 215, 215, 219, 223, 233, 236,
   240, 244, 246, 254, 260, 266, 272, 275, 277, 278, 284, 288, 295,
   301, 313, 322, 324, 330, 334, 339, 339, 345, 347, 354, 359, 364,
   370, 376, 381, 387, 391, 394, 403, 407, 413, 415, 418, 427, 429,
   431, 440, 444, 450, 456, 464, 469, 469, 469, 485, 494, 497, 501,
   506, 513, 518, 527, 531, 534, 539, 541, 545, 553, 559, 562, 567,
   575, 575, 579, 588, 593, 598, 604, 607, 610, 613, 618, 622,
};
/* aKWCode[i] is the parser symbol code for the i-th keyword */
static const unsigned char aKWCode[142] = {
  TK_REINDEX,    TK_INDEXED,    TK_INDEX,      TK_DESC,       TK_ESCAPE,     
  TK_EACH,       TK_CHECK,      TK_KEY,        TK_BEFORE,     TK_FOREIGN,    
  TK_FOR,        TK_IGNORE,     TK_LIKE_KW,    TK_EXPLAIN,    TK_INSTEAD,    
  TK_ADD,        TK_DEFERRABLE, TK_JOIN_KW,    TK_TABLE,      TK_ELSE,       
  TK_SELECT,     TK_THEN,       TK_END,        TK_DELETE,     TK_TEMP,       
  TK_TEMP,       TK_OR,         TK_ISNULL,     TK_NULLS,      TK_SAVEPOINT,  
  TK_INTERSECT,  TK_TIES,       TK_NOTNULL,    TK_NOT,        TK_NO,         
  TK_NULL,       TK_LIKE_KW,    TK_EXCLUDE,    TK_DEFAULT,    TK_TRANSACTION,
  TK_ACTION,     TK_ON,         TK_JOIN_KW,    TK_ALTER,      TK_RAISE,      
  TK_EXCEPT,     TK_TRIGGER,    TK_RANGE,      TK_GENERATED,  TK_DEFERRED,   
  TK_DISTINCT,   TK_IS,         TK_CONSTRAINT, TK_INTO,       TK_OFFSET,     
  TK_OF,         TK_SET,        TK_UNIQUE,     TK_QUERY,      TK_WITHOUT,    
  TK_WITH,       TK_JOIN_KW,    TK_REFERENCES, TK_BEGIN,      TK_JOIN_KW,    
  TK_RELEASE,    TK_AS,         TK_EXCLUSIVE,  TK_EXISTS,     TK_BETWEEN,    
  TK_NOTHING,    TK_LIKE_KW,    TK_BY,         TK_CASCADE,    TK_ASC,        
  TK_CASE,       TK_COLLATE,    TK_CREATE,     TK_CTIME_KW,   TK_IMMEDIATE,  
  TK_JOIN,       TK_INSERT,     TK_MATCH,      TK_HAVING,     TK_GROUPS,     
  TK_GROUP,      TK_PLAN,       TK_ANALYZE,    TK_PRAGMA,     TK_ABORT,      
  TK_UPDATE,     TK_VALUES,     TK_VIRTUAL,    TK_ALWAYS,     TK_WHEN,       
  TK_WHERE,      TK_RECURSIVE,  TK_AFTER,      TK_RENAME,     TK_AND,        
  TK_DROP,       TK_PARTITION,  TK_AUTOINCR,   TK_TO,         TK_IN,         
  TK_CAST,       TK_COLUMNKW,   TK_COMMIT,     TK_CONFLICT,   TK_JOIN_KW,    
  TK_CTIME_KW,   TK_CTIME_KW,   TK_CURRENT,    TK_PRECEDING,  TK_FAIL,       
  TK_LAST,       TK_FILTER,     TK_REPLACE,    TK_FIRST,      TK_FOLLOWING,  
  TK_FROM,       TK_JOIN_KW,    TK_LIMIT,      TK_IF,         TK_ORDER,      
  TK_RESTRICT,   TK_OTHERS,     TK_OVER,       TK_JOIN_KW,    TK_ROLLBACK,   
  TK_ROWS,       TK_ROW,        TK_UNBOUNDED,  TK_UNION,      TK_USING,      
  TK_VACUUM,     TK_VIEW,       TK_WINDOW,     TK_DO,         TK_INITIALLY,  
  TK_ALL,        TK_PRIMARY,    
};
/* Hash table decoded:
**   0: INSERT
**   1: IS
**   2: ROLLBACK TRIGGER
**   3: IMMEDIATE
**   4: PARTITION
**   5: TEMP
**   6:
**   7:
**   8: VALUES WITHOUT
**   9:
**  10: MATCH
**  11: NOTHING
**  12:
**  13: OF
**  14: TIES IGNORE
**  15: PLAN
**  16: INSTEAD INDEXED
**  17:
**  18: TRANSACTION RIGHT
**  19: WHEN
**  20: SET HAVING
**  21: IF
**  22: ROWS
**  23: SELECT
**  24:
**  25:
**  26: VACUUM SAVEPOINT
**  27:
**  28: LIKE UNION VIRTUAL REFERENCES
**  29: RESTRICT
**  30:
**  31: THEN REGEXP
**  32: TO
**  33:
**  34: BEFORE
**  35:
**  36:
**  37: FOLLOWING COLLATE CASCADE
**  38: CREATE
**  39:
**  40: CASE REINDEX
**  41: EACH
**  42:
**  43: QUERY
**  44: AND ADD
**  45: PRIMARY ANALYZE
**  46:
**  47: ROW ASC
**  48: CURRENT_TIME CURRENT_DATE
**  49:
**  50:
**  51: EXCLUSIVE TEMPORARY
**  52:
**  53: DEFERRED
**  54: DEFERRABLE
**  55:
**  56:
**  57:
**  58: DELETE VIEW GENERATED
**  59:
**  60: END
**  61: EXCLUDE
**  62: ESCAPE DESC
**  63: GLOB
**  64: WINDOW ELSE
**  65: COLUMN
**  66: FIRST
**  67:
**  68: GROUPS ALL
**  69: DISTINCT DROP KEY
**  70: BETWEEN
**  71: INITIALLY
**  72: BEGIN
**  73: FILTER CHECK ACTION
**  74: GROUP INDEX
**  75:
**  76: EXISTS DEFAULT
**  77:
**  78: FOR CURRENT_TIMESTAMP
**  79: EXCEPT
**  80:
**  81: CROSS
**  82:
**  83:
**  84:
**  85: CAST
**  86: FOREIGN AUTOINCREMENT
**  87: COMMIT
**  88: CURRENT AFTER ALTER
**  89: FULL FAIL CONFLICT
**  90: EXPLAIN
**  91: CONSTRAINT
**  92: FROM ALWAYS
**  93:
**  94: ABORT
**  95:
**  96: AS DO
**  97: REPLACE WITH RELEASE
**  98: BY RENAME
**  99: RANGE RAISE
** 100: OTHERS
** 101: USING NULLS
** 102: PRAGMA
** 103: JOIN ISNULL OFFSET
** 104: NOT
** 105: OR LAST LEFT
** 106: LIMIT
** 107:
** 108:
** 109: IN
** 110: INTO
** 111: OVER RECURSIVE
** 112: ORDER OUTER
** 113:
** 114: INTERSECT UNBOUNDED
** 115:
** 116:
** 117: ON
** 118:
** 119: WHERE
** 120: NO INNER
** 121: NULL
** 122:
** 123: TABLE
** 124: NATURAL NOTNULL
** 125: PRECEDING
** 126: UPDATE UNIQUE
*/
/* Check to see if z[0..n-1] is a keyword. If it is, write the
** parser symbol code for that keyword into *pType.  Always
** return the integer n (the length of the token). */
static int keywordCode(const char *z, int n, int *pType){
  int i, j;
  const char *zKW;
  if( n>=2 ){
    i = ((charMap(z[0])*4) ^ (charMap(z[n-1])*3) ^ n) % 127;
    for(i=((int)aKWHash[i])-1; i>=0; i=((int)aKWNext[i])-1){
      if( aKWLen[i]!=n ) continue;
      j = 0;
      zKW = &zKWText[aKWOffset[i]];
#ifdef SQLITE_ASCII
      while( j<n && (z[j]&~0x20)==zKW[j] ){ j++; }
#endif
#ifdef SQLITE_EBCDIC
      while( j<n && toupper(z[j])==zKW[j] ){ j++; }
#endif
      if( j<n ) continue;
      testcase( i==0 ); /* REINDEX */
      testcase( i==1 ); /* INDEXED */
      testcase( i==2 ); /* INDEX */
      testcase( i==3 ); /* DESC */
      testcase( i==4 ); /* ESCAPE */
      testcase( i==5 ); /* EACH */
      testcase( i==6 ); /* CHECK */
      testcase( i==7 ); /* KEY */
      testcase( i==8 ); /* BEFORE */
      testcase( i==9 ); /* FOREIGN */
      testcase( i==10 ); /* FOR */
      testcase( i==11 ); /* IGNORE */
      testcase( i==12 ); /* REGEXP */
      testcase( i==13 ); /* EXPLAIN */
      testcase( i==14 ); /* INSTEAD */
      testcase( i==15 ); /* ADD */
      testcase( i==16 ); /* DEFERRABLE */
      testcase( i==17 ); /* LEFT */
      testcase( i==18 ); /* TABLE */
      testcase( i==19 ); /* ELSE */
      testcase( i==20 ); /* SELECT */
      testcase( i==21 ); /* THEN */
      testcase( i==22 ); /* END */
      testcase( i==23 ); /* DELETE */
      testcase( i==24 ); /* TEMPORARY */
      testcase( i==25 ); /* TEMP */
      testcase( i==26 ); /* OR */
      testcase( i==27 ); /* ISNULL */
      testcase( i==28 ); /* NULLS */
      testcase( i==29 ); /* SAVEPOINT */
      testcase( i==30 ); /* INTERSECT */
      testcase( i==31 ); /* TIES */
      testcase( i==32 ); /* NOTNULL */
      testcase( i==33 ); /* NOT */
      testcase( i==34 ); /* NO */
      testcase( i==35 ); /* NULL */
      testcase( i==36 ); /* LIKE */
      testcase( i==37 ); /* EXCLUDE */
      testcase( i==38 ); /* DEFAULT */
      testcase( i==39 ); /* TRANSACTION */
      testcase( i==40 ); /* ACTION */
      testcase( i==41 ); /* ON */
      testcase( i==42 ); /* NATURAL */
      testcase( i==43 ); /* ALTER */
      testcase( i==44 ); /* RAISE */
      testcase( i==45 ); /* EXCEPT */
      testcase( i==46 ); /* TRIGGER */
      testcase( i==47 ); /* RANGE */
      testcase( i==48 ); /* GENERATED */
      testcase( i==49 ); /* DEFERRED */
      testcase( i==50 ); /* DISTINCT */
      testcase( i==51 ); /* IS */
      testcase( i==52 ); /* CONSTRAINT */
      testcase( i==53 ); /* INTO */
      testcase( i==54 ); /* OFFSET */
      testcase( i==55 ); /* OF */
      testcase( i==56 ); /* SET */
      testcase( i==57 ); /* UNIQUE */
      testcase( i==58 ); /* QUERY */
      testcase( i==59 ); /* WITHOUT */
      testcase( i==60 ); /* WITH */
      testcase( i==61 ); /* OUTER */
      testcase( i==62 ); /* REFERENCES */
      testcase( i==63 ); /* BEGIN */
      testcase( i==64 ); /* INNER */
      testcase( i==65 ); /* RELEASE */
      testcase( i==66 ); /* AS */
      testcase( i==67 ); /* EXCLUSIVE */
      testcase( i==68 ); /* EXISTS */
      testcase( i==69 ); /* BETWEEN */
      testcase( i==70 ); /* NOTHING */
      testcase( i==71 ); /* GLOB */
      testcase( i==72 ); /* BY */
      testcase( i==73 ); /* CASCADE */
      testcase( i==74 ); /* ASC */
      testcase( i==75 ); /* CASE */
      testcase( i==76 ); /* COLLATE */
      testcase( i==77 ); /* CREATE */
      testcase( i==78 ); /* CURRENT_DATE */
      testcase( i==79 ); /* IMMEDIATE */
      testcase( i==80 ); /* JOIN */
      testcase( i==81 ); /* INSERT */
      testcase( i==82 ); /* MATCH */
      testcase( i==83 ); /* HAVING */
      testcase( i==84 ); /* GROUPS */
      testcase( i==85 ); /* GROUP */
      testcase( i==86 ); /* PLAN */
      testcase( i==87 ); /* ANALYZE */
      testcase( i==88 ); /* PRAGMA */
      testcase( i==89 ); /* ABORT */
      testcase( i==90 ); /* UPDATE */
      testcase( i==91 ); /* VALUES */
      testcase( i==92 ); /* VIRTUAL */
      testcase( i==93 ); /* ALWAYS */
      testcase( i==94 ); /* WHEN */
      testcase( i==95 ); /* WHERE */
      testcase( i==96 ); /* RECURSIVE */
      testcase( i==97 ); /* AFTER */
      testcase( i==98 ); /* RENAME */
      testcase( i==99 ); /* AND */
      testcase( i==100 ); /* DROP */
      testcase( i==101 ); /* PARTITION */
      testcase( i==102 ); /* AUTOINCREMENT */
      testcase( i==103 ); /* TO */
      testcase( i==104 ); /* IN */
      testcase( i==105 ); /* CAST */
      testcase( i==106 ); /* COLUMN */
      testcase( i==107 ); /* COMMIT */
      testcase( i==108 ); /* CONFLICT */
      testcase( i==109 ); /* CROSS */
      testcase( i==110 ); /* CURRENT_TIMESTAMP */
      testcase( i==111 ); /* CURRENT_TIME */
      testcase( i==112 ); /* CURRENT */
      testcase( i==113 ); /* PRECEDING */
      testcase( i==114 ); /* FAIL */
      testcase( i==115 ); /* LAST */
      testcase( i==116 ); /* FILTER */
      testcase( i==117 ); /* REPLACE */
      testcase( i==118 ); /* FIRST */
      testcase( i==119 ); /* FOLLOWING */
      testcase( i==120 ); /* FROM */
      testcase( i==121 ); /* FULL */
      testcase( i==122 ); /* LIMIT */
      testcase( i==123 ); /* IF */
      testcase( i==124 ); /* ORDER */
      testcase( i==125 ); /* RESTRICT */
      testcase( i==126 ); /* OTHERS */
      testcase( i==127 ); /* OVER */
      testcase( i==128 ); /* RIGHT */
      testcase( i==129 ); /* ROLLBACK */
      testcase( i==130 ); /* ROWS */
      testcase( i==131 ); /* ROW */
      testcase( i==132 ); /* UNBOUNDED */
      testcase( i==133 ); /* UNION */
      testcase( i==134 ); /* USING */
      testcase( i==135 ); /* VACUUM */
      testcase( i==136 ); /* VIEW */
      testcase( i==137 ); /* WINDOW */
      testcase( i==138 ); /* DO */
      testcase( i==139 ); /* INITIALLY */
      testcase( i==140 ); /* ALL */
      testcase( i==141 ); /* PRIMARY */
      *pType = aKWCode[i];
      break;
    }
  }
  return n;
}
int sqlite3KeywordCode(const unsigned char *z, int n){
  int id = TK_ID;
  keywordCode((char*)z, n, &id);
  return id;
}
#define SQLITE_N_KEYWORD 142
int sqlite3_keyword_name(int i,const char **pzName,int *pnName){
  if( i<0 || i>=SQLITE_N_KEYWORD ) return SQLITE_ERROR;
  *pzName = zKWText + aKWOffset[i];
  *pnName = aKWLen[i];
  return SQLITE_OK;
}
int sqlite3_keyword_count(void){ return SQLITE_N_KEYWORD; }
int sqlite3_keyword_check(const char *zName, int nName){
  return TK_ID!=sqlite3KeywordCode((const u8*)zName, nName);
}
